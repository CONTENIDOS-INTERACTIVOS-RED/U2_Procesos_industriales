{"remainingRequest":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/src/views/curso/Tema2.vue?vue&type=template&id=29c96c9d&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/src/views/curso/Tema2.vue","mtime":1747280446236},{"path":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Procesos_industriales/U2_Procesos_industriales/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}